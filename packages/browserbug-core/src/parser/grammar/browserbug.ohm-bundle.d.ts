// AUTOGENERATED FILE
// This file was generated from browserbug.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface BrowserbugActionDict<T> extends BaseActionDict<T> {
  Exp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: IterationNode) => T;
  BrowserAndVersionExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  CompExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  SingleComparatorExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  MultiComparatorExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Version_majorminor?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Version_major?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Version?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  CommentExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  commentChars?: (this: NonterminalNode, arg0: IterationNode) => T;
  ident?: (this: NonterminalNode, arg0: IterationNode) => T;
  identifierPart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode) => T;
  opener?: (this: NonterminalNode, arg0: TerminalNode) => T;
  singlecomparator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  multicomparator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  commentstart?: (this: NonterminalNode, arg0: TerminalNode) => T;
  reserved?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface BrowserbugSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: BrowserbugActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: BrowserbugActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: BrowserbugActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: BrowserbugActionDict<T>): this;
}

export interface BrowserbugGrammar extends Grammar {
  createSemantics(): BrowserbugSemantics;
  extendSemantics(superSemantics: BrowserbugSemantics): BrowserbugSemantics;
}

declare const grammar: BrowserbugGrammar;
export default grammar;

